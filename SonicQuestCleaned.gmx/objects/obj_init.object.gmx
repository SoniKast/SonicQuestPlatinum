<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_loading</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize global (important) variables, fonts and extensions.

 // Palette swap shader:
    pal_swap_init_system(shd_pal_swapper);
    global.TGMS_IsEnabled  = true;
    
 // Fonts:
    global.main_font       = font_add_sprite(font_main, ord("!"), true , 1);
    global.lives_font      = font_add_sprite(font_lives, ord("0"), false, 0);
    global.hud_font        = font_add_sprite(font_hud_numbers, ord("0"), false, 0);
    global.title_card      = font_add_sprite(font_title_card, ord("A"), true , 0);   
    global.dataselect_font = font_add_sprite(spr_dataselect_font, ord("0"), false, 0); 
    global.title_font      = font_add_sprite(font_title, ord("!"), true , 0);
    global.fnt_credits     = font_add_sprite(spr_s2_font_credits, ord('A'), true, 0); 
    global.trial_font      = font_add_sprite(font_trial, ord("0"), true, 1);
    
 // Keyboard input:
    global.key_up           = vk_up;
    global.key_down         = vk_down;
    global.key_left         = vk_left;
    global.key_right        = vk_right;
    global.key_action       = ord("Q");
    global.key_special      = ord("S");
    global.key_enter        = vk_enter;
 
 // Gamepad input:
    global.gmp_enabled      = false;
    global.gmp_action       = 0;
    global.gmp_special      = 0;
    global.gmp_enter        = 0;
 
 // Zone / Data related:
    global.player_id            = 1;             // Player id.
    global.player_rings         = 0;             // Current amount of rings.
    global.player_score         = 0;             // Current score.
    global.player_score_mtp     = 0;             // Current score multiplier (when defeating enemies)
    global.player_continues     = 0;             // Current amount of continues.
    global.player_lives         = 3;             // Current amount of lives.
    global.player_emeralds      = 0;             // Current amount of chaos emeralds.
    global.cpu                  = 2;             // CPU id.
    global.do_time              = 0;             // Increases in game timers if enabled.
    global.game_time            = 0;             // Main game time.
    global.object_time          = 0;             // Seperate timer for objects- 
    global.game_paused          = 0;             // Is the game paused (Unused)
    global.time_over            = 1;             // Got a time over? (Unused)
    global.player_rings_100     = 1;             // Used to properly gain 100 rings.
    global.zone_id              = 0;             // ID of the current zone, used for data selects.
    global.death_height         = -1;            // Position that kills the player.
    global.checkpoint_x         = -1;            // Position used after respawning.
    global.checkpoint_y         = -1;            // Position used after respawning.
    global.temp_restart_x       = -1;
    global.temp_restart_y       = -1;
    global.specialring_x        = -1;
    global.specialring_y        = -1;
    global.checkpoint_t         = 0;             // Time used after respawning.
    global.water_position       = -1;            // Position of the water surface.
    global.game_completed       = 0;             // Have we completed the game?
    global.game_completed_full  = 0;             // Have we completed the game with all emeralds?
    global.first_zone           = rm_radiant_valley1; // The first zone in the game. See obj_dataselect_slot/_small and obj_fade_newgame()
    global.previous_room        = -1;            // Returns the previous room.
    global.BonusStage           = false;         // Are you in a bonus stage?
    global.BonusRings           = 0;             // Rings you get in a special stage
    global.BonusShield          = 0;             // Shield we got in a Bonus Stage. Current shield of the player. 0 - None, 1 - Normal, 2 - Fire, 3 - Electric / Magnetic, 4 - Water/ Bubble
    global.zone                 = 0;             //This will be used for letting the Big Ring object know which zone it is.
    global.save_file            = 1;
    global.save_icon            = 0;
    global.data_select_icon     = 1;             //To correctly display the level preview.
    global.cutscene             = false;
    global.demo                 = false;
    global.secret               = 0;
    
 // Modes
    global.time_attack          = false;  //Used in time attack mode so the big rings don't spawn
    global.best_time_ssz1       = 0;
    global.best_time_ssz2       = 0;
    global.best_time_ggz1       = 0;
    global.best_time_ggz2       = 0;
    global.best_time_ppz1       = 0;
    global.best_time_ppz2       = 0;
    global.best_time_ffz1       = 0;
    global.best_time_ffz2       = 0;
    global.best_time_ccz1       = 0;
    global.best_time_ccz2       = 0;
    global.best_time_ttz1       = 0;
    global.best_time_ttz2       = 0;
    global.best_time_ttz3       = 0;
    
 // Special Stages:
    global.special              = 0;    //This will be used for the controller object to count down when in a special stage     
    global.coming_from_special  = 0;
    global.ss_rings             = 0;
    global.used_emerald_1       = false;
    global.used_emerald_2       = false;
    global.used_emerald_3       = false;
    global.used_emerald_4       = false;
    global.used_emerald_5       = false;
    global.used_emerald_6       = false; 
    global.used_emerald_7       = false;
    
 // Rendering:
    global.screen_scale     = 1;         // The screen scale value.
    global.screen_width     = 424;       // The screen width.
    global.screen_height    = 240;       // The screen height.
    global.angle_mode       = 0;         // How to rotate the player. (0 for classic, 1 for smooth)
        
 // Sounds:
    global.bgm_id         = 0;     // Used to store the zone bgm. Unused.
    global.bgm_volume     = 1;     // The volume used for music.
    global.bgm_pitch      = 1;     // The pitch used for music. Unused.
    global.sfx_volume     = 1;     // The volume used for sound effects. 
    global.ring_sound     = 1;     // Used to properly play the ring sound.
    global.Cheats         = 1; // Do we allow cheats?
      
 // Load save slots:
    global.save_selected  = 1;     // The save slot we're currently using.
    for(i=1; i&lt;9; i+=1)
    {
        var _slot;
        _slot = save_load(i);

        if(_slot == true)
        {
           global.save_slot_zone           [i] = global.zone_id;
           global.save_slot_character      [i] = global.player_id;
           global.save_slot_cpu            [i] = global.cpu;
           global.save_slot_lives          [i] = global.player_lives;           
           global.save_slot_continues      [i] = global.player_continues;               
           global.save_slot_emeralds       [i] = global.player_emeralds;
           global.save_slot_completed      [i] = global.game_completed;
           global.save_slot_completed_full [i] = global.game_completed_full;
           global.save_slot_used_emerald1  [i] = global.used_emerald_1;
           global.save_slot_used_emerald2  [i] = global.used_emerald_2;
           global.save_slot_used_emerald3  [i] = global.used_emerald_3;
           global.save_slot_used_emerald4  [i] = global.used_emerald_4;
           global.save_slot_used_emerald5  [i] = global.used_emerald_5;
           global.save_slot_used_emerald6  [i] = global.used_emerald_6;
           global.save_slot_used_emerald7  [i] = global.used_emerald_7;
        }        
        else
        {
           global.save_slot_zone          [i] = 0;
           global.save_slot_character     [i] = 1;
           global.save_slot_cpu           [i] = 2;
           global.save_slot_lives         [i] = 3;           
           global.save_slot_continues     [i] = 0;               
           global.save_slot_emeralds      [i] = 0;
           global.save_slot_completed     [i] = 0;
           global.save_slot_completed_full [i] = 0;
           global.save_slot_used_emerald1 [i] = 0;
           global.save_slot_used_emerald2 [i] = 0;
           global.save_slot_used_emerald3 [i] = 0;
           global.save_slot_used_emerald4 [i] = 0;
           global.save_slot_used_emerald5 [i] = 0;
           global.save_slot_used_emerald6 [i] = 0;
           global.save_slot_used_emerald7 [i] = 0;
        }        
    }
  
 // Screen size.
    window_center();
    
 //Set the mode
    global.Mode = 0;
    
 // Icon speed.
    image_speed = 0;
    
    gml_release_mode(true)
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center screen.
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish sequence.
 
    room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize audio, screen and gamepad controller.
  
    instance_create(0, 0, obj_screen_controller);
    instance_create(0, 0, obj_gamepad_controller);
    instance_create(0, 0, obj_audio);
    save_global_load();
    alarm[4] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Boot sequence.

if(alarm[0] = -1)
{
    alarm[0]  = 20;
}
if(alarm[2] = -1)
{
    alarm[2]  = 200;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Boot sequence.

    draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, c_white, 1);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// restart the game
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
