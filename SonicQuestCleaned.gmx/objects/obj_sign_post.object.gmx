<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sign_post</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
    if(room != rm_forest_frenzy1)
    {
    sign_post_camera    = instance_create(x, y-80, obj_sign_post_camera); 
    }
    else if(room = rm_forest_frenzy1)
    {
    sign_post_camera    = instance_create(12992, 1520, obj_sign_post_camera); 
    }
    sign_post_activated = false;
    sign_post_duration  = 128;
    sign_post_timer     = 2;
    Drop                = false;              // Is the sign dropping?
    SpecialFlag         = 0;                  // Creates a different result object if true.
    XSpeed              = 0;                  // Horizontal speed of the sign post.
    YSpeed              = 0;                  // Vertical speed of the sign post.
    sign_post_finished  = false;
    image_speed         = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Everything.
 
 // Exit.
    if(sign_post_finished == true) exit;
    
 // Set camera.
    if(Drop = false)
    {
        if(bbox_right  &gt; view_xview
        &amp;&amp; bbox_left   &lt; view_xview + view_wview
        &amp;&amp; bbox_bottom &gt; view_yview
        &amp;&amp; bbox_top    &lt; view_yview + view_hview)   
        {
           with(obj_camera)
           {
                cam_handle  = other.sign_post_camera;
                limit_left  = other.sign_post_camera.x-view_wview/2;
                limit_right = other.sign_post_camera.x+view_wview/2;
           }
        }
    }
    
 // Spin. 
    if(sign_post_activated == true)
    {
       if(sign_post_duration != 0)
       {
          if(sign_post_timer != 0)
          {
             sign_post_timer -= 1;
          }
          else
          {
             sign_post_timer  = 2;
             image_index     += 1
             if(image_index = 15 &amp;&amp; global.secret = 0)
             {
             image_index = 0
             }
             if(sign_post_duration mod 4 == 0)
             {
                dummy_effect_create(spr_invincibility_sparkle, 0.6, x-24+(irandom_range(0, 3)*16), y-48+(irandom_range(0, 2)*16), -1, 0);
             }
          }
       }
       else // Finish.
       {
          if(instance_exists(obj_results) == false)       
          {
             sign_post_finished = true;          
             image_index        = obj_level_controller.player_index*4;
             instance_create(x, y, obj_results);
             with(obj_player){
                 goal_state = 1;     
             }
          }
       }       
       sign_post_duration -= 1;
    }
    // Drop:
       if(place_meeting(x, y + YSpeed, par_solid) &amp;&amp; YSpeed &gt; 0){ 
          while(!place_meeting(x, y + sign(YSpeed), par_solid)){ 
                y += sign(YSpeed);
          } 
          Drop   = false;
          XSpeed = 0;
          YSpeed = 0;
          event_user(0);
       }
       if(Drop == true){
          YSpeed += 0.21875 
          if(YSpeed &gt; 4){
             YSpeed = 4;
          }
          y  += YSpeed;
          if(sign_post_activated == false){
             sign_post_activated = true;
          }
       }
       
    // Bounce:
       if(instance_exists(par_player) &amp;&amp; Drop == true){
          if(place_meeting(x, y-1, par_player)){
             if(par_player.state == STATE_JUMP){
                YSpeed  = -6;
                XSpeed  = (x - par_player.x)/6;
                if(audio_is_playing(general_signpost) == false){
                   aud_play_sound(general_signpost, global.sfx_volume, 1, 0, 0);
                }
             }
          }       
       }
       if(SpecialFlag != 0 &amp;&amp; Drop != false){
          if(x &lt; view_xview+sprite_width/2){
             XSpeed = 2;
          }  
          if(x &gt; view_xview+view_wview-sprite_width/2){
             XSpeed = -2;
          }              
          x += XSpeed; 
          }     

    // Update Camera position (for dropping)
       if(SpecialFlag != 0){    
          sign_post_camera.y = y-80;
       }         

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trigger.

    if(sign_post_activated == false &amp;&amp; Drop == false)
    {
       // Activate and play sound.
          sign_post_activated = true;
          aud_play_sound(general_signpost, global.sfx_volume, 1, 0, 0);
                    
       // Disable timer.
          global.do_time = 0;       
          with(obj_player){
               // Make sure that you can no longer transform after this.
                  AllowTransformation = 0;       
                  if(CharacterState != CharacterNormal){
               // Make sure to not run the alarm event:
                  alarm[0] = -1;
               // Reset the Characters state:
                  CharacterState = CharacterNormal;                
               // Change the animation to "BLANK" to make sure that the current animation is being reloaded.
                  animation      = "BLANK";
               // Reset the Transform Timer:
                  TransformTimer = 15;
               // Again, change the animation to "BLANK" to make sure that the current animation is being reloaded properly.
                  animation      = "BLANK AGAIN";    
               // If we're Sonic, use a little fade palette:
                  if(global.player_id = CHAR_SONIC){
                     TransformEnded  = 1;    
                     PalettePosition = 0;       
                  }           
                  }            
            }
     }
                 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After drop, finish everything.

    if(sign_post_activated == false &amp;&amp; Drop == false){
       sign_post_activated = true;       
       with(obj_player){
               // Make sure that you can no longer transform after this.
                  AllowTransformation = 0;       
            if(CharacterState != CharacterNormal){
               // Make sure to not run the alarm event:
                  alarm[0] = -1;
               // Reset the Characters state:
                  CharacterState = CharacterNormal;                
               // Change the animation to "BLANK" to make sure that the current animation is being reloaded.
                  animation      = "BLANK";
               // Reset the Transform Timer:
                  TransformTimer = 15;
               // Again, change the animation to "BLANK" to make sure that the current animation is being reloaded properly.
                  animation      = "BLANK AGAIN";    
               // If we're Sonic, use a little fade palette:
                  if(global.player_index = CHAR_SONIC){
                     TransformEnded  = 1;    
                     PalettePosition = 0;       
                  }           
            }            
       }
       
     }
     global.do_time = 0;     

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
