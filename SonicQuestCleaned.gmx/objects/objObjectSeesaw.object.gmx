<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprObjectSeesaw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_platform_no_angle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
   // Init
   event_inherited();
   image_speed = 0;
   image_index = 0;
   block = false;
   
   left_area   = 0;
   center_area = 0;
   right_area  = 0;
   left_ball   = 0;
   right_ball  = 0;
   
   left   = 1;
   center = 2;
   right  = 3;
   
   state  = center;
   active = true;
   
   limit1 = instance_create(x - 56, y, objSeesawLimiterLeft);
   limit2 = instance_create(x + 56, y, objSeesawLimiterRight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   
   if (instance_exists(obj_player) == false) exit;
   if (obj_player.y_speed &lt; 0) exit;
   
   if (active == true)
     mask_index = sprGimmickSeesawMask;
   if (active == false) {
     mask_index = sprGimmickSeesawMask0;
     exit;
   }
   
   // Collision
   if (state != center)
   {
   left_area   = collision_rectangle(x-48, y-34-obj_player.y_speed/2, x-26, y+20, obj_player, 1, 1);
   center_area = collision_rectangle(x-1,  y-24, x+1,  y+20, obj_player, 1, 1);
   right_area  = collision_rectangle(x+26, y-34-obj_player.y_speed/2, x+48, y+20, obj_player, 1, 1);
   }
   else
   {
   left_area   = collision_rectangle(x-49, y-16, x-30, y+20, obj_player, 1, 1);
   center_area = collision_rectangle(x-5,  y-16, x+5,  y+20, obj_player, 1, 1);
   right_area  = collision_rectangle(x+30, y-16, x+49, y+20, obj_player, 1, 1);
   }
   
   // Main
   if (state != left &amp;&amp; left_area == obj_player.id)   
   {
       if (left_area.ground == false)
       {
       left_area.y = y - 8;
       left_area.ground = true;
       left_area.y_speed = 0;
       }
       if (right_ball == objObjectSpikeball.id)
       {
          if (right_ball.Ground)
          {
            right_ball.Gravity = -9;
            right_ball.Ground  = false;
            right_ball.Speed   = -0.85;
          }
          right_ball = -1;
       }
       state = left;
   }
   if (state != center &amp;&amp; center_area == obj_player.id)   
   {
       if (center_area.ground == false)
       {
       center_area.ground = true;
       center_area.y_speed = 0;
       center_area.y = y - 12;
       }
       if (right_ball == objObjectSpikeball.id)
       {
          if (right_ball.Ground)
          {
            right_ball.Gravity = -9;
            right_ball.Ground  = false;
            right_ball.Speed   = -0.85;
          }
          right_ball = -1;
       }
       if (left_ball == objObjectSpikeball.id)
       {
          if (left_ball.Ground)
          {
            left_ball.Gravity = -9;
            left_ball.Ground  = false;  
            left_ball.Speed   = 0.85;
          }
          left_ball = -1;
       }
       state = center;
   }
   if (state != right &amp;&amp; right_area == obj_player.id)   
   {  
       if (right_area.ground == false)
       {
       right_area.y = y - 8;
       right_area.ground = true;
       right_area.y_speed = 0;      
       }
       if (left_ball == objObjectSpikeball.id)
       {
          if (left_ball.Ground)
          {
            left_ball.Gravity = -9;
            left_ball.Ground  = false;  
            left_ball.Speed   = 0.85;
          }
          left_ball = -1;
       }
       state = right;
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   
   if (instance_exists(obj_player) == false) exit;
   if (objObjectSpikeball.Gravity &lt; 0) exit;
   
   // Collision
   if (state != center)
   {
   left_ball   = collision_rectangle(x-42, y-32, x-26, y+20, objObjectSpikeball, 1, 1);
   right_ball  = collision_rectangle(x+26, y-32, x+42, y+20, objObjectSpikeball, 1, 1);
   }
   else
   {
   left_ball   = collision_rectangle(x-42, y-16, x-26, y+20, objObjectSpikeball, 1, 1);
   right_ball  = collision_rectangle(x+26, y-16, x+42, y+20, objObjectSpikeball, 1, 1);
   }   
   
   
   // Main
   if (state != right &amp;&amp; right_ball == objObjectSpikeball.id)
   {  
       if (left_area == obj_player.id &amp;&amp; image_index == 0)
       {
          if (left_area.ground == true)
          {
             left_area.ground  = false;
             left_area.y       = y-45;
             left_area.y_speed = -15/max(((left_area.x)-bbox_left)/14, 1);
             left_area.state  = STATE_SPRING;
             aud_play_sound(general_spring, global.sfx_volume, 1, 0, 0);
          }
       }
       if (center_area == obj_player.id &amp;&amp; image_index == 1)
       {
          if (center_area.ground == true)
          {
             center_area.ground  = false;
             center_area.y       = y-45;
             center_area.y_speed = -12/max(((center_area.x)-bbox_left)/14, 1);
             center_area.state  = STATE_SPRING;
             aud_play_sound(general_spring, global.sfx_volume, 1, 0, 0);
          }
       }
       right_ball.Speed = 0;
       right_ball.Gravity = 0;
       right_ball.Ground = true;
       right_ball.x = x+40;
       right_ball.y = y+4;
       state = right;
   }
   if (state != left &amp;&amp; left_ball == objObjectSpikeball.id)
   {  
       if (right_area == obj_player.id &amp;&amp; image_index == 2)
       {
          if (right_area.ground == true)
          {
             right_area.ground  = false;
             right_area.y       = y-45;
             right_area.y_speed = -15/max((bbox_right-(right_area.x))/14, 1);
             right_area.state  = STATE_SPRING;
             aud_play_sound(general_spring, global.sfx_volume, 1, 0, 0);
          }
       }
       if (center_area == obj_player.id &amp;&amp; image_index == 1)
       {
          if (center_area.ground == true)
          {
             center_area.ground  = false;
             center_area.y       = y-45;
             center_area.y_speed = -12/max(((center_area.x)-bbox_left)/14, 1);
             center_area.state  = STATE_SPRING;
             aud_play_sound(general_spring, global.sfx_volume, 1, 0, 0);
            }
       }
       left_ball.Speed = 0;
       left_ball.Gravity = 0;
       left_ball.Ground = true;
       left_ball.x = x-40;
       left_ball.y = y+4;
       state = left;
   }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   
   if (instance_exists(obj_player) == false) exit;
   if (active == false &amp;&amp; obj_player.state == STATE_JUMP) active = true;
   if (state == left)   image_index = 0;
   if (state == center) image_index = 1;
   if (state == right)  image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
