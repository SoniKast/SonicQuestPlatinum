<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    trial_y           = 0;
    trial_menu_option = 0;
    trial_menu_active = 0;
    trial_menu_string = "SONIC";
    alarm[0]          = 15;
    player_select     = 0;
    trial_act_string  = "ACT 1"
    act_select        = 0;
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate menu control.
   
    trial_menu_active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change menu option.

 // Change options.
    if(trial_menu_active == 1)
    {
       if(keyboard_check_pressed(global.key_down))
       {
          if(trial_menu_option &lt; 3)
          {
             trial_menu_option += 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             trial_menu_option = 0;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }
       if(keyboard_check_pressed(global.key_up))
       {
          if(trial_menu_option &gt; 0)
          {
             trial_menu_option -= 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             trial_menu_option = 3;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }       
    }
    
 // String.
    if(trial_menu_active == 1)
    { 
           switch(player_select)
           {
              case 0:
              {
                   trial_menu_string = "SONIC";
                   break;
              }
              case 1:
              {
                   trial_menu_string = "TAILS";
                   break;
              }
              case 2:
              {
                   trial_menu_string = "KNUCKLES";
                   break;
              }
              case 3:
              {
                   trial_menu_string = "KAST";
                   break;
              }
           }
       }
       
    if(trial_menu_active == 1)
    { 
           switch(act_select)
           {
              case 0:
              {
                   trial_act_string = "ACT 1";
                   break;
              }
              case 1:
              {
                   trial_act_string = "ACT 2";
                   break;
              }
           }
       }
    
    // Character select
    if(trial_menu_active == 1)
    {
        if(trial_menu_option = 0 &amp;&amp; global.secret = 0)
        {
           if(keyboard_check_pressed(global.key_right))
           {
              if(player_select &lt; 2)
              {
                 player_select += 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 player_select = 0;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }
           if(keyboard_check_pressed(global.key_left))
           {
              if(player_select &gt; 0)
              {
                 player_select -= 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 player_select = 2;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }       
        }
        else 
        if(trial_menu_option = 0 &amp;&amp; global.secret = 1)
        {
           if(keyboard_check_pressed(global.key_right))
           {
              if(player_select &lt; 3)
              {
                 player_select += 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 player_select = 0;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }
           if(keyboard_check_pressed(global.key_left))
           {
              if(player_select &gt; 0)
              {
                 player_select -= 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 player_select = 3;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }       
        }
    }
    if(trial_menu_active == 1)
    {
        if(trial_menu_option = 1)
        {
           if(keyboard_check_pressed(global.key_right))
           {
              if(act_select &lt; 1)
              {
                 act_select += 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 act_select = 0;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }
           if(keyboard_check_pressed(global.key_left))
           {
              if(act_select &gt; 0)
              {
                 act_select -= 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
              else
              {
                 act_select = 1;
                 aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
              }
           }       
        }
    }    
    
 // Choose.
    if(trial_menu_active == 1)
    { 
       if(keyboard_check_pressed(global.key_enter))
       {
          trial_menu_active = 0;
          switch(trial_menu_option)
          {
                 case 0:
                 {
                 trial_menu_active = 1;
                 break;
                 }
                 case 1:
                 {
                 trial_menu_active = 1;
                 break;
                 }
                 case 2:
                 {
                      if(act_select = 0)
                      {
                          with(instance_create(0, 0, obj_fade_to_value))
                          {
                               value = rm_pinball_panic1;
                          }
                      }
                      else if(act_select = 1)
                      {
                          with(instance_create(0, 0, obj_fade_to_value))
                          {
                               value = rm_pinball_panic2
                          }
                      }
                      global.player_id   = player_select+1;
                      global.cpu         = 0;
                      global.time_attack = true;
                      global.save_selected = -1;
                      break;
                 }
                 case 3:
                 {
                 instance_destroy();
                 with(obj_time_attack)
                 {
                 turnoff   = false;
                 canselect = 1;
                 canmove   = 1;
                 }
                 break;
                 }
          }
       }    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Logo and menu.

 // Draw menu.
    draw_sprite_ext(spr_player_mask_dot, 0, x, y, 424, 240, 0, c_black, 0.5);
    draw_set_color(c_white);
    draw_sprite(spr_time_attack_picture, 3, 160+51, 40);
    draw_set_font(global.trial_font);
    draw_set_halign(fa_left);
    draw_text(35+51, 56, "-"+"BEST TIME"+"-");
    if(trial_act_string = "ACT 1" || trial_act_string != "ACT 2")
    {
    draw_text(35+51, 77, string(floor(global.best_time_ppz1/60000))+":"+scr_string_number_format(floor(global.best_time_ppz1/1000) mod 60,2)+":"+scr_string_number_format(floor(global.best_time_ppz1/10) mod 100,2));
    }
    if(trial_act_string = "ACT 2" || trial_act_string != "ACT 1")
    { 
    draw_text(35+51, 77, string(floor(global.best_time_ppz2/60000))+":"+scr_string_number_format(floor(global.best_time_ppz2/1000) mod 60,2)+":"+scr_string_number_format(floor(global.best_time_ppz2/10) mod 100,2));
    }
    draw_set_halign(fa_center);
    if(trial_menu_option = 0)
    {
    draw_set_color(c_yellow);
    draw_text(51+51, 99, trial_menu_string); 
    }
    else
    {
    draw_set_color(c_white);
    draw_text(51+51, 99, trial_menu_string); 
    }
    if(trial_menu_option = 1)
    {
    draw_set_color(c_yellow);
    draw_text(51+51, 121, trial_act_string);
    }
    else
    {
    draw_set_color(c_white);
    draw_text(51+51, 121, trial_act_string);
    }
    if(trial_menu_option = 2)
    {
    draw_set_color(c_yellow);
    draw_text(54+51, 164, "START"); 
    }
    else
    {
    draw_set_color(c_white);
    draw_text(54+51, 164, "START"); 
    }
    if(trial_menu_option = 3)
    {
    draw_set_color(c_yellow);
    draw_text(54+51, 184, "RETURN"); 
    }
    else
    {
    draw_set_color(c_white);
    draw_text(54+51, 184, "RETURN"); 
    }
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
