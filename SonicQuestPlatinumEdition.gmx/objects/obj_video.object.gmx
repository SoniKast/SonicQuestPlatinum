<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_option_bg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup Variables:
usable              = false; 
options_id          = 1;     //The current selected Option.
options_available   = 4;    //How many options are available?
overlay_alpha       = 0;     //Used to make the Screen darker.
options_description = "";    //To draw a Description.
menu_rotation       = 0;
button_mapping      = false; //If we Choose to map the Gamepad Options!
transparency        = 0;
initialized         = true;
position            = -424;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Piss
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.

 // Scale:
    if(global.display_fullscreen == false)
    {
       window_set_size(global.display_width * global.display_scale, global.display_height * global.display_scale)
       if(window_get_fullscreen() == true)
       {
          window_set_fullscreen(false);
       }
       alarm[1] = 5;
    }
    else
    {
       window_set_size(global.display_width, global.display_height)    
       window_set_fullscreen(true);
    }
    
 // VSync:
    display_reset(0, global.display_vsync);
    instance_create(0, 0, obj_options);
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initialized = true)
{
    position = lerp(position, 0, 0.1);
    if(position &gt; -4)
    {
        usable = 1;
    }
}
if(usable)
{
    if(transparency != 1)
    {
        transparency += .02;
    } 
    //Scroll Up:
    if(keyboard_check_pressed(global.ip_up)){
    // || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0)){
       if(options_id != 1){
          options_id -= 1;
       }else{
          options_id = options_available;
      };
      audio_play(_general_menu_bleep, global.sfx_volume);  
    };
    
    //Scroll Down:
    if(keyboard_check_pressed(global.ip_down)){
    // || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0)){
       if(options_id != options_available){
          options_id += 1;
       }else{
          options_id = 1;
      };
      audio_play(_general_menu_bleep, global.sfx_volume);  
    };
    
    /// Change Options:
    switch(options_id)
    {
        // --- Screen Resolution:
        case 1:
        {
           if(keyboard_check_pressed(global.ip_left)) // || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0) &amp;&amp; global.display_size &gt; 1)
           {
                if(global.display_scale &gt; 1)
                {
                    global.display_scale--;
                }
                else
                {
                    global.display_scale = 3;
                }
                audio_play(_general_menu_bleep, global.sfx_volume);  
           }
           if(keyboard_check_pressed(global.ip_right)) // || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0) &amp;&amp; global.display_size &lt; 3)
           {               
                if(global.display_scale &lt; 3)
                {
                    global.display_scale++;
                }
                else
                {
                    global.display_scale = 1;
                }
                audio_play(_general_menu_bleep, global.sfx_volume);
           }
           break;
        }
        // --- Fullscreen:
        case 2:
        {
            if(keyboard_check_pressed(global.ip_left))// || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0) &amp;&amp; global.display_fullscreen != 0)
            {
                if(global.display_fullscreen == 1)
                {
                    global.display_fullscreen = 0;
                }
                else
                {
                    global.display_fullscreen = 1;
                }
                audio_play(_general_menu_bleep, global.sfx_volume); 
            }
            if(keyboard_check_pressed(global.ip_right))// || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0) &amp;&amp; global.display_fullscreen != 1)
            {
                if(global.display_fullscreen == 0)
                {
                    global.display_fullscreen = 1;
                }
                else
                {
                    global.display_fullscreen = 0;
                }
                audio_play(_general_menu_bleep, global.sfx_volume);  
            }
            break;
        }
        // --- VSync:
        case 3:
        {
            if(keyboard_check_pressed(global.ip_left))// || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0) &amp;&amp; global.lang != 0)
            {
                if(global.display_vsync == 1)
                {
                    global.display_vsync = 0;
                }
                else
                {
                    global.display_vsync = 1;
                }
                audio_play(_general_menu_bleep, global.sfx_volume);  
            }
            if(keyboard_check_pressed(global.ip_right))// || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0) &amp;&amp; global.lang != 4)
            {
                if(global.display_vsync == 0)
                {
                    global.display_vsync = 1;
                }
                else
                {
                    global.display_vsync = 0;
                }
                audio_play(_general_menu_bleep, global.sfx_volume);  
            }
            break;
        }
        // --- Exit:
        case 4:
        {
            if(keyboard_check_pressed(global.ip_button_s))// || joy_pressed(0, global.gamepad_start))
            {
                config_save_display();
                if(alarm[0] = -1)
                {
                    alarm[0] = 1;
                }
                audio_play(_general_menu_accept, global.sfx_volume);  
            }
            break;
        }
    }
}
    // Save:
    global.setting_display_scale      = global.display_scale;
    global.setting_display_fullscreen = global.display_fullscreen;
    global.setting_display_vsync      = global.display_vsync;
                

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw event
draw_sprite(spr_option_bg, 0, view_xview+global.display_width/2+position, view_yview+global.display_height/2)

// Setup Font:
draw_set_font(global.font_main);
draw_set_color(c_white);

// Draw "Options" on the top of the screen.
draw_set_halign(fa_center);
{
    draw_text(210+position, 73, "VIDEO OPTIONS");
}
draw_set_halign(-1)

/* --- Draw Options --- */
/// Screen size
if(options_id = 1)
{
    draw_set_color(c_yellow);
};
draw_text(123+position, 102, "Screen Size");
draw_set_color(c_white);

// Show sizes:
switch(global.display_scale)
{
    case 1:
    {
        draw_set_halign(fa_right);
        draw_text(296+position,102,"424x240"); 
        draw_set_halign(-1);
        break;
    }
    case 2:
    {
        draw_set_halign(fa_right);
        draw_text(296+position,102,"848x480"); 
        draw_set_halign(-1);
        break;
    }
    case 3:
    {
        draw_set_halign(fa_right);
        draw_text(296+position,102,"1272x720"); 
        draw_set_halign(-1);
        break;
    }
}

/// Fullscreen 
if(options_id = 2)
{
    draw_set_color(c_yellow);
}
draw_text(123+position, 118, "Fullscreen");
draw_set_color(c_white);

// Draw the number:
switch(global.display_fullscreen)
{
    case 0:
    {
        draw_set_halign(fa_right);
        draw_text(296+position, 118, "No");
        draw_set_halign(-1);
        break;
    }
    case 1:
    {
        draw_set_halign(fa_right);
        draw_text(296+position, 118, "Yes");
        draw_set_halign(-1);
        break;
    }
}

/// VSync
if(options_id = 3)
{
    draw_set_color(c_yellow);
};
draw_text(123+position, 134, "VSync");
draw_set_color(c_white);

// Draw the text:
switch(global.display_vsync)
{
    case 0:
    {
        draw_set_halign(fa_right);
        draw_text(296+position, 134, "No");
        draw_set_halign(-1);
        break;
    }
    case 1:
    {
        draw_set_halign(fa_right);
        draw_text(296+position, 134, "Yes");
        draw_set_halign(-1);
        break;
    }
}

/// Exit
if(options_id = 4)
{
    draw_set_color(c_yellow);
};
draw_text(123+position, 150, "Return");
draw_set_color(c_white);

// ----------------------------------------------

// Alpha
draw_set_alpha(image_alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
