<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control_bg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup Variables:
usable              = false; 
options_id          = 1;     //The current selected Option.
options_available   = 11;    //How many options are available?
overlay_alpha       = 0;     //Used to make the Screen darker.
options_description = "";    //To draw a Description.
menu_rotation       = 0;
button_mapping      = false; //If we Choose to map the Gamepad Options!
transparency        = 0;
initialized         = true;
position            = -424;
option_value_timer  = 30;
option_change_timer = 0;
option_change_mode  = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.
    with(instance_create(0, 0, obj_options))
    {
        main_menu_option = 1;   
    }
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initialized = true)
{
    position = lerp(position, 0, 0.1);
    if(position &gt; -4)
    {
        usable = 1;
    }
}
if(usable)
{
    if(transparency != 1)
    {
        transparency += .02;
    } 
    //Scroll Up:
    if(keyboard_check_pressed(global.ip_up)){
    // || (joy_hat_y(0) = -1 &amp;&amp; GMP.dpad_up == 0)){
       if(options_id != 1){
          options_id -= 1;
       }else{
          options_id = options_available;
      };
      audio_play(_general_menu_bleep, global.sfx_volume);  
    };
    
    //Scroll Down:
    if(keyboard_check_pressed(global.ip_down)){
    // || (joy_hat_y(0) = 1 &amp;&amp; GMP.dpad_down == 0)){
       if(options_id != options_available){
          options_id += 1;
       }else{
          options_id = 1;
      };
      audio_play(_general_menu_bleep, global.sfx_volume);  
    };
    
    // Input changing timer.
       if(option_change_timer &gt; 0)
       {
          option_change_timer -= 1;
       }
       else
       {
           option_change_timer = 0;
       }

    /// Change Options:
    switch(options_id)
    {
        // --- Up:
        case 1:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_up = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           }     
           break;
        }
        // --- Down:
        case 2:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_down = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- Left:
        case 3:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_left = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- Right:
        case 4:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_right = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- A Button:
        case 5:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_button_a = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- B Button:
        case 6:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_button_b = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- Start Button:
        case 7:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
            {
                if(keyboard_check_pressed(global.ip_button_s))
                {
                    option_change_mode  = 1;
                    option_change_timer = 15; 
                    keyboard_clear(vk_anykey);
                }
            }   
           else
           {
              if(option_change_timer == 0)
              {                
                 global.ip_button_s = keyboard_key;
                 if(keyboard_check_pressed(vk_anykey))
                 { 
                    keyboard_clear(vk_anykey);
                    option_change_mode  = 0;
                    option_change_timer = 15;
                    audio_play(_general_menu_bleep, global.sfx_volume);                        
                 }
              }
           } 
            break;
        }
        // --- Gamepad A:
        case 8:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
               {
                  if(keyboard_check_pressed(global.ip_button_s) &amp;&amp; (joy_count() &gt; 0))
                  {
                     option_change_mode  = 1;
                     option_change_timer = 15;                     
                  }
               }   
               else
               {
                  if(option_change_timer == 0)
                  {
                     global.dip_button_a = "Waiting for Input";                    
                     for(i=0; i&lt;joy_buttons(0); i+=1)
                     {
                     
                        if(joy_pressed(0, i))
                        {
                           global.dip_button_a = i;
                           option_change_mode  = 0;
                           option_change_timer = 15;
                           audio_play(_general_menu_bleep, global.sfx_volume); 
                        }                      
                     }
                  }
               }    
            break;
        }
        // --- Gamepad B:
        case 9:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
               {
                  if(keyboard_check_pressed(global.ip_button_s) &amp;&amp; (joy_count() &gt; 0))
                  {
                     option_change_mode  = 1;
                     option_change_timer = 15; 
                  }
               }   
               else
               {
                  if(option_change_timer == 0)
                  {
                     global.dip_button_b = "Waiting for Input";                   
                     for(i=0; i&lt;joy_buttons(0); i+=1)
                     {                     
                        if(joy_pressed(0, i))
                        {
                           global.dip_button_b = i;
                           option_change_mode  = 0;
                           option_change_timer = 15;
                           audio_play(_general_menu_bleep, global.sfx_volume);                       
                        }                         
                     }
                  }
               }     
            break;
        }
        // --- Gamepad Start:
        case 10:
        {
            if(option_change_mode == 0 &amp;&amp; option_change_timer == 0)
               {
                  if(keyboard_check_pressed(global.ip_button_s) &amp;&amp; (joy_count() &gt; 0))
                  {
                     option_change_mode  = 1;
                     option_change_timer = 15; 
                  }
               }   
               else
               {
                  if(option_change_timer == 0)
                  {
                     global.dip_button_s = "Waiting for Input";
                     for(i=0; i&lt;joy_buttons(0); i+=1)
                     {
                        if(joy_pressed(0, i))
                        {
                           global.dip_button_s = i;
                           option_change_mode  = 0;
                           option_change_timer = 15;
                           audio_play(_general_menu_bleep, global.sfx_volume);                           
                        }                                            
                     }
                  }
               }      
            break;
        }
        // --- Exit:
        case 11:
        {
            if(keyboard_check_pressed(global.ip_button_s) || joy_pressed(0, global.dip_button_s))
            {
                config_save_input();
                if(alarm[0] = -1)
                {
                    alarm[0] = 1;
                }
                audio_play(_general_menu_accept, global.sfx_volume);  
            }
            break;
        }
    }
}

 // Save:
    global.setting_input_up               = global.ip_up;
    global.setting_input_down             = global.ip_down;
    global.setting_input_left             = global.ip_left;
    global.setting_input_right            = global.ip_right;
    global.setting_input_button_a         = global.ip_button_a;
    global.setting_input_button_b         = global.ip_button_b;
    global.setting_input_button_s         = global.ip_button_s;
    global.setting_input_gamepad_button_a = global.dip_button_a;
    global.setting_input_gamepad_button_b = global.dip_button_b;
    global.setting_input_gamepad_button_s = global.dip_button_s;       

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw event
draw_sprite(spr_control_bg, 0, view_xview+global.display_width/2+position, view_yview+global.display_height/2)

// Setup Font:
draw_set_font(global.font_main);
draw_set_color(c_white);

// Draw "Options" on the top of the screen.
draw_set_halign(fa_center);
{
    draw_text(210+position, 73, "CONTROL OPTIONS");
}
draw_set_halign(-1)

/* --- Draw Options --- */
// Up button
if(options_id = 1)
{
    draw_set_color(c_yellow);
};
draw_text(66+position, 94, "Up:"+name_convert(global.ip_up));
draw_set_color(c_white);

// Down button
if(options_id = 2)
{
    draw_set_color(c_yellow);
};
draw_text(66+position, 108, "Down:"+name_convert(global.ip_down));
draw_set_color(c_white);

// Left button
if(options_id = 3)
{
    draw_set_color(c_yellow);
};
draw_text(66+position, 122, "Left:"+name_convert(global.ip_left)); 
draw_set_color(c_white);

// Right button
if(options_id = 4)
{
    draw_set_color(c_yellow);
};
draw_text(66+position, 136, "Right:"+name_convert(global.ip_right));
draw_set_color(c_white);

// A button
if(options_id = 5)
{
    draw_set_color(c_yellow);
};
draw_text(133+position, 94, "A:"+name_convert(global.ip_button_a));  
draw_set_color(c_white);

// B button
if(options_id = 6)
{
    draw_set_color(c_yellow);
}; 
draw_text(133+position, 108, "B:"+name_convert(global.ip_button_b));   
draw_set_color(c_white);

// Start button
if(options_id = 7)
{
    draw_set_color(c_yellow);
}; 
draw_text(133+position, 122, "Start:"+name_convert(global.ip_button_s));  
draw_set_color(c_white);

// Gamepad A button
if(options_id = 8)
{
    draw_set_color(c_yellow);
}; 
draw_text(229+position, 94, "Gamepad A:"+name_convert(global.dip_button_a));  
draw_set_color(c_white);

// Gamepad B button
if(options_id = 9)
{
    draw_set_color(c_yellow);
}; 
draw_text(229+position, 108,  "Gamepad B:"+string(global.dip_button_b));  
draw_set_color(c_white);

// Gamepad Start button
if(options_id = 10)
{
    draw_set_color(c_yellow);
}; 
draw_text(229+position, 122, "Gamepad Start:"+string(global.dip_button_s)); 
draw_set_color(c_white);

/// Exit
if(options_id = 11)
{
    draw_set_color(c_yellow);
};
draw_text(66+position, 160, "Return");
draw_set_color(c_white);

// ----------------------------------------------

// Alpha
draw_set_alpha(image_alpha);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
