<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999995</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Bonus Variables:
    bonus_total     = 0;
    bonus_time      = 0;
    bonus_ring      = (global.crings * 100);
    bonus_perfect   = 50000;
    bonus_decrement = 100;

 // Set the time bonus:    
    seconds = floor(global.game_time/1000); 
    if(seconds &lt;= 29)
    {
       bonus_time   = 50000;
    }
    else if(seconds &gt; 29 &amp;&amp; seconds &lt;= 44)
    {
            bonus_time   = 10000;
    }
    else if(seconds &gt;= 45 &amp;&amp; seconds &lt;= 59)
    {
            bonus_time   = 5000;
    }
    else if(seconds &gt;= 60 &amp;&amp; seconds &lt;= 89)
    {
            bonus_time   = 4000;
    }
    else if(seconds &gt;= 90 &amp;&amp; seconds &lt;= 119)
    {
            bonus_time   = 3000;
    }
    else if(seconds &gt;= 120 &amp;&amp; seconds &lt;= 179)
    {
            bonus_time   = 2000;
    }
    else if(seconds &gt;= 180 &amp;&amp; seconds &lt;= 239)
    {
            bonus_time   = 1000;
    }
    else if(seconds &gt;= 240 &amp;&amp; seconds &lt;= 299)
    {
            bonus_time   = 500;
    }
    else if(seconds &gt;= 300)
    {
            bonus_time   = 0;
    }

 // Set values for skipping:    
    bonus_skip      = bonus_ring + bonus_time;
    bonus_current   = global.cscore;    
    
 // Disable checkpoint data.
    global.checkpoint_x = -1;
    global.checkpoint_y = -1;
    global.checkpoint_t =  0; 
       
 // Allow counting:
    can_do          = 0; 
    can_count       = 0;
    result_counting = 0;
    
 // Skip:
    can_skip = 0; 

 // Positions / Going out:
    going_out      =    0;
    go_off         =  global.display_width;
    go_off_2       = -global.display_width;
    
 // Text Positions:
    result_gfx_position[0]        = -global.display_width;
    result_gfx_position[1]        =  global.display_width;    
    result_gfx_position[2]        =  global.display_width+30;
    result_gfx_position[3]        =  global.display_width+60;
    result_gfx_position[4]        =  global.display_width+90;
    result_gfx_position[5]        =  global.display_width+120;
    result_gfx_position_completed = false;

 // Disappear (For Act 2)
    disappear_flag = false;

 // Misc.
    special_flag = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End it.

    if(going_out = 0)
    {
       if(go_off_2 &lt; 0)
       {
          go_off_2 += 20;
          alarm[5] = 1;
       }
    }
    else
    {
        if(global.zone_act = 1)
        {
            room_goto_next();
        }
        else
        {
            // Create fade.
            if(instance_exists(obj_fade_to) == false)
            {
                with(instance_create(x, y, obj_fade_to))
                {
                    fade_to = room_next(room);
                }        
            }
        }
    }
       
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Going out.
    
    if(going_out = 0)
    {
       if(go_off &gt; 0)
       {
          go_off -= 20;
          alarm[1] = 1;
       }
       else
       {
          alarm[2] = 1;
       }
    }
    else
    {
       alarm[2] = 1; 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start counting.
   
    result_counting = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text Positions &amp; Counting.
    
    if(going_out == 0)
    {
       if(result_gfx_position[0] &lt; 0)
       {
          result_gfx_position[0] += 10;
       }
       else
       {
          result_gfx_position[0] = 0;    
       }
       if(result_gfx_position[1] &gt; 0){
          result_gfx_position[1] -= 10;
       }
       else
       {
          result_gfx_position[1] = 0;    
       }    
       if(result_gfx_position[2] &gt; 0){
          result_gfx_position[2] -= 10;
       }
       else
       {
          result_gfx_position[2] = 0;    
       }    
       if(result_gfx_position[3] &gt; 0)
       {
          result_gfx_position[3] -= 10;
       }
       else
       {
          result_gfx_position[3] = 0;    
       }    
       if(result_gfx_position[4] &gt; 0)
       {
          result_gfx_position[4] -= 10;
       }
       else
       {
          result_gfx_position[4] = 0;              
       }       
       if(result_gfx_position[5] &gt; 0)
       {
          result_gfx_position[5] -= 10;
       }
       else
       {
          result_gfx_position[5] = 0;
       }
       if(result_gfx_position[0] == 0 &amp;&amp; result_gfx_position[1] == 0 &amp;&amp; result_gfx_position[2] == 0 &amp;&amp;
          result_gfx_position[4] == 0 &amp;&amp; result_gfx_position[5] == 0 &amp;&amp; result_gfx_position_completed == false)
       {
          result_gfx_position_completed = true;
          
          // Trigger counting.
             if(result_counting == false)
             {
                if(alarm[0] == -1)
                {
                   alarm[0] = 280;
                   can_skip = 1;
                }
             }   
       }
       
       // Start counting.
          if(result_counting == true)
          { 
             // Skip:
                if((keyboard_check_pressed(global.ip_button_s) || joy_pressed(0, global.dip_button_s)) &amp;&amp; can_skip == 1)
                {
                   can_skip      = 0;
                   bonus_time    = 0;
                   bonus_ring    = 0;
                   bonus_perfect = 0;
                   bonus_total   = bonus_skip;
                   global.cscore = bonus_current + bonus_skip;
                }
                         
             // Counting:
                var change;
                if(bonus_time &gt; 0)
                {
                   change         = min(bonus_time, bonus_decrement);
                   bonus_time    -= change;
                   bonus_total   += change;
                   global.cscore += change;
                }
                if(bonus_ring &gt; 0)
                {
                   change         = min(bonus_ring, bonus_decrement);
                   bonus_ring    -= change;
                   bonus_total   += change;
                   global.cscore += change;                   
                }
                if(!instance_exists(obj_ring) &amp;&amp; bonus_perfect &gt; 0)
                {
                   change         = min(bonus_perfect, bonus_decrement);
                   bonus_perfect -= change;
                   bonus_total   += change;
                   global.cscore += change;
                }
                
             // Sounds:
                if(bonus_ring &gt; 0 || bonus_time &gt; 0 || bonus_perfect &gt; 0)
                {
                    if(audio_is_playing(_general_score_add) == 0)
                    {
                       audio_play(_general_score_add, global.sfx_volume); 
                    }                         
                }
                
             // Finish:
                if(not(bonus_ring &gt; 0 || bonus_time &gt; 0 || bonus_perfect &gt; 0))
                {
                   // Stop Sound:
                      if(audio_is_playing(_general_score_add) == 1)
                      {
                         audio_stop(_general_score_add)
                      }
                      
                   // Finish up:
                      if(can_do == 0)
                      {
                         count_sound   = 0;
                         global.crings = 0;
                         can_do              = 1;
                         if(audio_is_playing(_general_score_total) == 1)
                         {
                             audio_stop(_general_score_total); 
                         }   
                         audio_play(_general_score_total, global.sfx_volume);        
                      }
                      if(can_do = 1 &amp;&amp; audio_is_playing(_general_score_total) == false)
                      {
                         can_do = 2;
                      }
                      if(going_out = 0 &amp;&amp; can_do == 2)
                      {
                         if(audio_is_playing(_ev_act_clear) == false)
                         {
                            going_out = 1
                            alarm[1] = 100;
                         }
                      }                   
                }
          } 
    }else{
       if(special_flag != 0 &amp;&amp; can_do == 2){
       
       if(result_gfx_position[0] &gt; -424){
          result_gfx_position[0] -= 10;
       }else{
          result_gfx_position[0] = -424;    
       }
       if(result_gfx_position[1] &lt; 424){
          result_gfx_position[1] += 10;
       }else{
          result_gfx_position[1] = 424;    
       }    
       if(result_gfx_position[2] &lt; 424){
          if(result_gfx_position[0] &gt; -290){
             result_gfx_position[2] += 10;
          }
       }else{
          result_gfx_position[2] = 424;    
       }    
       if(result_gfx_position[3] &lt; 424){
          if(result_gfx_position[2] &gt; 30){
             result_gfx_position[3] += 10;
          }
       }else{
          result_gfx_position[3] = 424;    
       }    
       if(result_gfx_position[4] &lt; 424){
          if(result_gfx_position[3] &gt; 30){
             result_gfx_position[4] += 10;
          }      
       }else{
          result_gfx_position[4] = 424;    
       }
             
       }     
    }
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disappear for Act 2.

    if(disappear_flag = true){
    
       if(go_off &gt; -424){
          go_off -= 20
       }

       if(go_off_2 &lt; 424){
          go_off_2 += 20
       }
       
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Results.

 // "Character" Got:
    draw_sprite(spr_results_name, global.character_index, view_xview+180+result_gfx_position[0], view_yview+57);
    
 // Act Letter:
    draw_sprite(spr_results_act, global.zone_act-1, view_xview+289+result_gfx_position[1], view_yview+57);
    
 // Time Bonus:
    draw_sprite(spr_results_time, 0, view_xview+125+result_gfx_position[2], view_yview+111);     

 // Ring Bonus:
    draw_sprite(spr_results_ring, 0, view_xview+125+result_gfx_position[3], view_yview+127);  

 // Total:
    draw_sprite(spr_results_total, 0, view_xview+125+result_gfx_position[5], view_yview+159);   
    
 // Perfect Bonus:
    if(!instance_exists(obj_ring))
    {
        draw_sprite(spr_results_perfect, 0, view_xview+125+result_gfx_position[4], view_yview+143);   
    }
    
 // Draw Bonuses:
    draw_set_font(global.font_hud_number)
    draw_set_color(c_white)
    draw_set_halign(fa_right)
    
    draw_number_zero(view_xview+276+result_gfx_position[2], view_yview+111,''+ string(bonus_time),  0);
    draw_number_zero(view_xview+276+result_gfx_position[3], view_yview+127,''+ string(bonus_ring), 0);
    draw_number_zero(view_xview+276+result_gfx_position[5], view_yview+159,    string(bonus_total), 0);
    
 // Perfect Bonus:
    if(!instance_exists(obj_ring))
    {
        draw_number_zero(view_xview+276+result_gfx_position[4], view_yview+143,''+ string(bonus_perfect), 0);
    }
    
    draw_set_halign(-1)    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
