<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bombclaw_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>par_badnik_grounded</parentName>
  <maskName>msk_bombclaw</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Get common variables from parent:
    event_inherited();
 
 // Set horizontal speed.
    x_speed = -(0.5);
    
 // Animation:
    sprite           = spr_bombclaw_left;
    sprite_speed     = 0.18;
    sprite_direction = -1;
    object_direction = "dir_left";
 
 // Shoot &amp; misc variables.
    shoot_await_timer = 128;
    shoot_timer       = 0;
    turn_timer        = 0;
    shoot_triggered   = false;
    _target           = par_character;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement. (Overwrite from parent)
 
 // Only run if in view.
    if(in_view())
    {
    
 // Direction
    if(object_direction == "dir_left")
    {
        if(sprite != spr_bombclaw_left)
        {
            sprite = spr_bombclaw_left;
        }
    }
    if(object_direction == "dir_middle")
    {
        if(sprite != spr_bombclaw_middle)
        {
            sprite = spr_bombclaw_middle;
        }
    }
    if(object_direction == "dir_right")
    {
        if(sprite != spr_bombclaw_right)
        {
            sprite = spr_bombclaw_right;
        }
    }
    
 // Sprite direction
    if(x-_target.x &lt; -20)
    {
        if(object_direction != "dir_left")
        {
            object_direction = "dir_left";
        }
    }
    else
    if(x-_target.x &gt; 20)
    {
        if(object_direction != "dir_right")
        {
            object_direction = "dir_right";
        }   
    }
    else
    {
        if(object_direction != "dir_middle")
        {
            object_direction = "dir_middle";
        }
    }
    
 // Shooting:
    if(turn_timer == 0)
    {
           if(shoot_await_timer == 0)
           {   
              if(shoot_timer &lt; 60)
              {
              
                 if(sprite != spr_bombclaw_shoot)
                 {
                    image_speed = 0;
                    image_index = 0;
                    sprite      = spr_bombclaw_shoot;
                 }
              }
              if(shoot_timer &lt; 60)
              {
                 shoot_timer += 1;
              }
              else
              {
                 if(floor(image_index) &lt; 6)
                 {
                     if(floor(image_index) &lt; 3)
                     {
                        image_index += 0.25;
                     }
                     else
                     {
                        image_index += 0.35;
                     }
                     if(floor(image_index) == 3 &amp;&amp; shoot_triggered == false)
                     {
                        shoot_triggered = true;
                        audio_play(_badnik_shot, global.sfx_volume);
                        with(instance_create(x-16, y-2, obj_ooz_bombclaw_projectile))
                        {
                             x_speed = -1;
                             y_speed = -4;
                             image_alpha = 0.5;
                             image_speed = 0.25;
                        }
                        with(instance_create(x+16, y-2, obj_ooz_bombclaw_projectile))
                        {
                             x_speed =  1;
                             y_speed = -4;
                             image_alpha = 0.5;
                             image_speed = 0.25;                         
                        }                    
                     }
                 }
                 else
                 {
                    sprite            = spr_bombclaw_shoot;
                    shoot_await_timer = 128;
                    shoot_timer       = 0;
                    shoot_triggered   = false;
                    turn_timer        = 30;
                    image_index       = 0;
                    x_speed           = -x_speed;            
                    sprite_direction *= -1;  
                 } 
              }
           }   
           else
           {
              shoot_await_timer -= 1;
           }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw badnik.

    draw_sprite_ext(sprite, floor(image_index), floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
    
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
