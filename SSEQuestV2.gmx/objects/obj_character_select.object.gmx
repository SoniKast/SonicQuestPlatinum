<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
initialized    = false;
sonic_surf     = noone;
tails_surf     = noone;
sonic_chosen   = 0;
tails_chosen   = 0;
css_option     = 0;
css_active     = 0;
x_speed        = 0;
css_position   = -424;
css_position_2 = 424;
alarm[0]       = 1;
alarm[1]       = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
initialized = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_speed -= 2;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(initialized = true)
    {
        css_position   = lerp(css_position, 0, 0.1);
        css_position_2 = lerp(css_position_2, 0, 0.1);
        css_active     = 1;
    }
    
    if(css_active == 1)
    {
       if(keyboard_check_pressed(global.key_left))
       {
          if(css_option &lt; 1)
          {
             css_option  += 1;
             sonic_chosen = 1;
             tails_chosen = 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
             buffer = true;
          }
          else
          {
             css_option   = 0;
             sonic_chosen = 0;
             tails_chosen = 0;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
             buffer = true;    
          }
       }
       if(keyboard_check_pressed(global.key_right))
       {
          if(css_option &gt; 0)
          {
             css_option  -= 1;
             sonic_chosen = 0;
             tails_chosen = 0;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
             buffer = true;
          }
          else
          {
             css_option   = 1;
             sonic_chosen = 1;
             tails_chosen = 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }
        // Choose.   
        if(keyboard_check_pressed(global.key_enter))
        {
          css_active = 0;
          audio_stop_sound(music_menu);
          aud_play_sound(general_menu_accept, global.sfx_volume, 1, 0, 0);
          switch(css_option)
          {
                 case 0:
                 {
                      aud_play_sound(general_menu_vo_sonic, global.sfx_volume, 1, 0, 0);
                      global.player_id = 1;
                      with(instance_create(0, 0, obj_fade_to_value))
                      {
                           value = global.first_zone;
                           global.player_lives      = 3;
                           global.player_continues  = 0;
                           global.player_rings      = 0;
                           global.player_score      = 0;
                           global.player_rings_100  = 1;
                           global.player_score_mtp  = 0;
                           global.player_emeralds   = 0;
                           global.temp_restart_x    = -1;
                           global.temp_restart_y    = -1;
                           global.checkpoint_x      = -1;
                           global.checkpoint_y      = -1;
                           global.checkpoint_t      = 0;
                           global.used_emerald_1    = false;
                           global.used_emerald_2    = false;
                           global.used_emerald_3    = false;
                           global.used_emerald_4    = false;
                           global.used_emerald_5    = false;
                           global.used_emerald_6    = false;
                           global.used_emerald_7    = false;
                      }
                      break;
                 }
                 case 1:
                 {
                      aud_play_sound(general_menu_vo_tails, global.sfx_volume, 1, 0, 0);
                      global.player_id = 2;
                      with(instance_create(0, 0, obj_fade_to_value))
                      {
                           value = global.first_zone;
                           global.player_lives      = 3;
                           global.player_continues  = 0;
                           global.player_rings      = 0;
                           global.player_score      = 0;
                           global.player_rings_100  = 1;
                           global.player_score_mtp  = 0;
                           global.player_emeralds   = 0;
                           global.temp_restart_x    = -1;
                           global.temp_restart_y    = -1;
                           global.checkpoint_x      = -1;
                           global.checkpoint_y      = -1;
                           global.checkpoint_t      = 0;
                           global.used_emerald_1    = false;
                           global.used_emerald_2    = false;
                           global.used_emerald_3    = false;
                           global.used_emerald_4    = false;
                           global.used_emerald_5    = false;
                           global.used_emerald_6    = false;
                           global.used_emerald_7    = false;
                      }
                      break;
                 }
          }
       }      
        // Choose CPU.   
        if(keyboard_check_pressed(global.key_action))
        {
          aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          switch(css_option)
          {
                 case 0:
                 {
                      global.cpu = 2;
                      break;
                 }
          }
       }
       // Leave.
       if(keyboard_check_pressed(global.key_special))
       {
            instance_create(0, 0, obj_main_menu);
            instance_destroy();
       }         
    }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the surface
if(surface_exists(sonic_surf)){
    surface_free(sonic_surf);
}
if(surface_exists(tails_surf)){
    surface_free(tails_surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the surface
if(surface_exists(sonic_surf)){
    surface_free(sonic_surf);
}
if(surface_exists(tails_surf)){
    surface_free(tails_surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the surface
// Check if surface exists, otherwise create it again.
draw_sprite(spr_menu_knux, 0, global.screen_width/2, global.screen_height/2);
switch(global.screen_mode)
{
    case 1:
    if(surface_exists(sonic_surf) == false) { sonic_surf = surface_create(212, 207); }
  
    // Draw surface.
    surface_set_target(sonic_surf);
    draw_sprite_tiled_horizontal(spr_css_sonic_bg, 0, css_position+x_speed, 0);
    draw_sprite(spr_css_sonic, sonic_chosen, css_position, 0);
    surface_reset_target();

    draw_surface(sonic_surf, 0+css_position, 17);
 
    // Check if surface exists, otherwise create it again.
    if(surface_exists(tails_surf) == false) { tails_surf = surface_create(212, 207); }
  
    // Draw surface.
    surface_set_target(tails_surf);
    draw_sprite_tiled_horizontal(spr_css_tails_bg, 0, css_position_2+x_speed, 0);
    draw_sprite(spr_css_tails, tails_chosen, css_position_2, 0);
    surface_reset_target();

    draw_surface(tails_surf, 212+css_position_2, 17);  
    break;
    
    case 2:
    if(surface_exists(sonic_surf) == false) { sonic_surf = surface_create(160, 176); }
  
    // Draw surface.
    surface_set_target(sonic_surf);
    draw_sprite_tiled_horizontal(spr_css_sonic_bg, 0, css_position+x_speed, 0);
    draw_sprite(spr_css_sonic_prime, sonic_chosen, css_position, 6);
    surface_reset_target();

    draw_surface(sonic_surf, 0+css_position, 24);
 
    // Check if surface exists, otherwise create it again.
    if(surface_exists(tails_surf) == false) { tails_surf = surface_create(160, 176); }
  
    // Draw surface.
    surface_set_target(tails_surf);
    draw_sprite_tiled_horizontal(spr_css_tails_bg, 0, css_position_2+x_speed, 0);
    draw_sprite(spr_css_tails_prime, tails_chosen, css_position_2, 6);
    surface_reset_target();

    draw_surface(tails_surf, 160+css_position_2, 24);  
    break;
    
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
