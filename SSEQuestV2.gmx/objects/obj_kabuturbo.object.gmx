<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kabuturbo_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_enemy</parentName>
  <maskName>spr_kabuturbo_walk</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A rhino guy.
// Physics Basic
physics_create(true, true, false, false, false)

// Flags.
badnik_block_timer = -1;
state = 0;
charge_timer = -1;
dashing_timer = -1;
skid_dust_timer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
physics_step()  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 0 - Walk around
if (state == 0)
{
    if (ground)
    {
        // No friction in the ground..
            apply_friction = false;
       
        // Movement depending on animation_direction
        if (animation_direction = 1)
        {
            physics_move_right()
        }
        
        if (animation_direction = -1)
        {
            physics_move_left()
        }
        
        // Collision with Walls.
            if (wallR)
            {
                animation_direction = -1;
            }
            
            if (wallL)
            {
                animation_direction = 1;
            }
            
        // Collision with Badnik Blocks.
            if (instance_place(x, y, obj_badnik_block) &amp;&amp; badnik_block_timer = -1)
            {
                badnik_block_timer = 80;
                animation_direction *= -1;
            }
            
            if (badnik_block_timer &gt; -1)
            {
                badnik_block_timer --;
            }
            
        // Charge
            if instance_exists(obj_player)
            {
                if (((obj_player.ground) &amp;&amp; distance_to_object(obj_player) &lt; 150 &amp;&amp; inview() &amp;&amp; dashing_timer = -1) &amp;&amp;
                ((obj_player.x &gt; x &amp;&amp; animation_direction = 1) or (obj_player.x &lt; x &amp;&amp; animation_direction = -1))
                 &amp;&amp; (sprite_index = spr_kabuturbo_walk &amp;&amp; abs(x_speed) = x_speed_max &amp;&amp; animation_direction = sign(x_speed)))
                {
                    state = 1;
                    charge_timer = 60;
                }
            }
            

    }
    else
    {
        // Friction in the air.
            apply_friction = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 1 - Charging
if (state == 1)
{
    // Friction
        apply_friction = true;
    
    // Point Towards Player.
        if (obj_player.ground)
        {
            if (obj_player.x &gt; x)
            {
                animation_direction = 1;
            }
            else
            {
                animation_direction = -1;
            }
        }
        
    // Charge
        if charge_timer &gt; -1
        {
            charge_timer --;
        }
        else
        {
            dashing_timer = 85;
            state = 2;
        }
    
    // Badnik Blocks
        if instance_place(x,y,obj_badnik_block)
        {
            badnik_block_timer = 20;
            x_speed /= 1.2;
        }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State 2 - Dash
if (state == 2)
{
    if (ground)
    {
        // No friction in the ground..
            apply_friction = false;
       
        // Movement depending on animation_direction
            if (animation_direction = 1)
            {
                physics_move_right()
            }
            
            if (animation_direction = -1)
            {
                physics_move_left()
            }
        
        // Collision with Walls.
            if (wallR)
            {
                animation_direction = -1;
            }
            
            if (wallL)
            {
                animation_direction = 1;
            }
            
        // Collision with Badnik Blocks.
            if (instance_place(x, y, obj_badnik_block) &amp;&amp; badnik_block_timer = -1)
            {
                badnik_block_timer = 80;
                animation_direction *= -1;
            }
            
            if (badnik_block_timer &gt; -1)
            {
                badnik_block_timer --;
            }
            
        // Dash Timer
            if (dashing_timer &gt; -1)
            {
                dashing_timer --;
            }
            else
            {
                state = 0;
                x_speed /= 2; 
            }
    }
    else
    {
        // Friction in the air.
            apply_friction = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites.
    if (state = 0)
    {
        if ((badnik_block_timer &gt; 25) &amp;&amp; (sign(x_speed) != animation_direction))
        {
            sprite_index = spr_kabuturbo_drift;
        }
        else
        {
            sprite_index = spr_kabuturbo_walk;
        }
    }
    
    if (state = 1)
    {
        sprite_index = spr_kabuturbo_charging;
    }
    
    if (state = 2)
    {
        if ((badnik_block_timer &gt; 25) &amp;&amp; (sign(x_speed) != animation_direction))
        {
            sprite_index = spr_kabuturbo_charged_drift;
        }
        else
        {
            sprite_index = spr_kabuturbo_charged_walk;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Physics

if (state != 2)
{
    x_speed_accel   = 0.15;
    x_speed_decel   = 0.025;
    x_speed_friction = 0.05;
    x_speed_max     = 4.6;
}
else
{
    x_speed_accel   = 0.5;
    x_speed_decel   = 0.25;
    x_speed_friction = 0.05;
    x_speed_max     = 6;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Effects

// Spindash
if state = 1
{
        if chance(5) = 1
        {
            dummy_effect_create_speed(spr_skid_dust_weak, 0.2, floor(x) - (20 * animation_direction), bbox_bottom, 0.2, 0, 5 * -animation_direction, -random(5), 0.2)    
        }
}

// Skid Dust
if (state = 2 or sprite_index = spr_kabuturbo_charged_drift)
{
    if skid_dust_timer = -1
    {
        dummy_effect_create(spr_skid_dust, 0.5, floor(x) - (20 * animation_direction), bbox_bottom - 2, 2, 0 )
        scr_afterimage(sprite_index, image_index, floor(x), floor(y), animation_direction, 1, animation_angle, c_purple, 0.8, depth + 3)
        skid_dust_timer = 6;
    }
    else
    {
        skid_dust_timer --;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw.

// Draw Bull
physics_draw()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
